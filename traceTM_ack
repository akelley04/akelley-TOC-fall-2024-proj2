#!/usr/bin/env python3

import csv, time
from collections import defaultdict

def read_csv(csvfile, inputstr):
    file_name = csvfile
    transitions = []
    with open(file_name, mode ='r')as file:
        csvFile = csv.reader(file)
        for line, lines in enumerate(csvFile):
            # first line grab name of machine
            if line == 0:
                name = lines
            # grab start state 
            elif line == 4:
                start = lines
            # grab accept state 
            elif line == 5:
                accept = lines
            # grab reject state 
            elif line == 6:
                reject = lines
            # grab transitions
            elif line >= 7:
                transitions.append(lines)
        info = [start, accept, reject, inputstr]
        transitions_dict = transdict(transitions)
        configurations, rejected = bfs(transitions, transitions_dict, info)

    #output
    output(name, info, configurations, rejected)
            
def transdict(transitions):
    transitions_dict = defaultdict(list)
    for transition in transitions:
        transitions_dict[transition[0]].append(transition)
    return dict(transitions_dict)

def bfs(transitions, transitions_dict, info):
    #variables
    notfound = True
    level = 0
    curr_state = ''.join(info[0])
    accept_state = ''.join(info[1])
    reject_state = ''.join(info[2])
    ogstr = ''.join(info[3])
    maxdepth = 50
    rejected = False

    #if the string is empty check for any transitions else reject
    if not ogstr:
        ogstr = "_"

    #configuration stuff
    configurations = [[["", curr_state, ogstr[0], ogstr]]]            # initial configuration
    

    while notfound:
        level_configs = []                                  # configurations for current level


        if level >= len(configurations) or level >= maxdepth:
            rejected = True
            return configurations, rejected
        
        # look at each configuration at the current
        for config in configurations[level]:
            leftstr = config[0]
            rightstr = config[-1]
            curr_state = config[1]
            check_char = rightstr[0] if rightstr else '_'

            if curr_state == reject_state:
                continue

            #check transitions for the current state
            if curr_state in transitions_dict:
                    for trans in transitions_dict[curr_state]:
                        if trans[1] == check_char:
                            if trans[-1] == 'R':
                                add_config = go_right(leftstr, rightstr, trans)
                            elif trans[-1] == 'L':
                                add_config = go_left(leftstr, rightstr, trans)
                            level_configs.append(add_config)
                        else:
                            add_config = go_right(leftstr, rightstr, trans, reject_state, rej=True)
                            level_configs.append(add_config)

        if level_configs:
            convert_tup = {tuple(config) for config in level_configs}
            convert_list = [list(config) for config in convert_tup]
            configurations.append(convert_list)

        for config in configurations[level]:
            if accept_state in config:
                notfound = False
                break

        level += 1

    return configurations, rejected

def go_left(leftstr, rightstr, trans):
    # if the left string is empty make it into a blank
    if len(leftstr) == 0:
        leftstr += '_'

    # newleft is leftstr without last character and newright is rightstr with new written character on front
    newleft = leftstr[:-1]
    newright = trans[3] + rightstr

    #new configuration
    return [newleft, trans[2], newright[0], newright]

def go_right(leftstr, rightstr, trans, reject_state=None, rej=False):
    # if the right string needs a character to read in
    if len(rightstr) <= 1:
        rightstr += '_'

    #newright is rightstr without old head
    newright = rightstr[1:]

    #check to see if it goes to reject state or not and returns new configuration
    if rej:
        #if does go to reject state, newleft is leftstr with head of rightstr and new state is reject state
        newleft = leftstr + rightstr[0]
        return [newleft, reject_state, newright[0], newright]
    else:
        #if does not go to a reject state, newleft is left str with rewrite character added and the state transition specified
        newleft = leftstr + trans[3]
        return [newleft, trans[2], newright[0], newright]

def output(name, info, configurations, rejected):
    print(f'Machine Name: {"".join(name)}')
    print(f'Initial String: {info[3]}')
    depth = len(configurations) - 1
    print(f'Depth of configurations tree: {depth}')
    transitions = sum(len(configuration) for configuration in configurations) - 1
    print(f'Total number of transitions: {transitions}')
    print(f'Nondeterminism: {transitions / depth}')

    #when accepted
    if rejected == False:
        print(f'String accepted in {depth}')
        for config in configurations:
            print(config)
    elif rejected == True:
        print(f'String rejected in {depth}')
        for config in configurations:
            print(config)

def main():
    inputstr = "ba"
    read_csv("check-abc_star-ack.csv", inputstr)

if __name__ == "__main__":
    main()